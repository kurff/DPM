
syntax = "proto2";
package kurff;
message TensorProto{
    repeated float data = 1;
    repeated int32 dims = 2;
    optional string name = 3;
}


message NormalizedBBox {
  optional float xmin = 1;
  optional float ymin = 2;
  optional float xmax = 3;
  optional float ymax = 4;
  optional int32 label = 5;
  optional bool difficult = 6;
  optional float score = 7;
  optional float size = 8;
}

message Annotation {
  optional int32 instance_id = 1 [default = 0];
  optional NormalizedBBox bbox = 2;
}

message AnnotationGroup {
  optional int32 group_label = 1;
  repeated Annotation annotation = 2;
}
// image data
message Datum {
  optional int32 channels = 1;
  optional int32 height = 2;
  optional int32 width = 3;
  // the actual image data, in bytes
  optional bytes data = 4;
  optional int32 label = 5;
  // Optionally, the datum could also hold float data.
  repeated float float_data = 6;
  // If true data contains an encoded image that need to be decoded
  optional bool encoded = 7 [default = false];
}

message HOGParameters{
    required int32 sbin = 1 [default=4];
    optional string name = 2;
}
message ConvParameters{
  required int32 pad_b = 1 [default=1];
  required int32 pad_l = 3;
  required int32 pad_r = 4;
  required int32 pad_t = 5;
  required int32 kernel_h = 6;
  required int32 kernel_w = 7;
  required int32 kernel_d = 8;
  required int32 stride_w = 9;
  required int32 stride_h = 10;


}

enum DeviceType {
  CPU = 0;                    // In default, we will use CPU.
  CUDA = 1;                   // CUDA.
  MKLDNN = 2;                 // Reserved for explicit MKLDNN
  ONLY_FOR_TEST = 20901701;   // This device type is only for test.
}

message DeviceOption {
  // [general] Options that need to be carried out before running the execution.
  // optional DeviceType device_type = 1 [ default = CPU ];
  optional int32 device_type = 1 [ default = 0 ]; // 0 is CPU.
  // [CUDA specific] the cuda gpu id.
  optional int32 cuda_gpu_id = 2;
  // [general] The random seed to start the device random number generator with.
  optional uint32 random_seed = 3;
}


message Parameters{
    optional HOGParameters hog_parameters =1;
    optional ConvParameters conv_parameters = 2;
    


}



message ModelDef{
  

}

message OperatorDef{
  optional string name = 1;
  repeated string input = 2;
  repeated string output = 3;
  optional DeviceOption device_option = 4;
  optional string engine = 5;
    

  

}