// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kurff.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kurff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kurff {
class TensorProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorProto> {
} _TensorProto_default_instance_;
class NormalizedBBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NormalizedBBox> {
} _NormalizedBBox_default_instance_;
class AnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Annotation> {
} _Annotation_default_instance_;
class AnnotationGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotationGroup> {
} _AnnotationGroup_default_instance_;
class DatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Datum> {
} _Datum_default_instance_;
class HOGParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HOGParameters> {
} _HOGParameters_default_instance_;
class DeviceOptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceOption> {
} _DeviceOption_default_instance_;
class ParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Parameters> {
} _Parameters_default_instance_;
class ModelDefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelDef> {
} _ModelDef_default_instance_;
class OperatorDefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperatorDef> {
} _OperatorDef_default_instance_;

namespace protobuf_kurff_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, dims_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, xmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, ymax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, difficult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBBox, size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, bbox_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationGroup, group_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotationGroup, annotation_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HOGParameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HOGParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HOGParameters, sbin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HOGParameters, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, cuda_gpu_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, random_seed_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, hog_parameters_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(TensorProto)},
  { 9, 22, sizeof(NormalizedBBox)},
  { 30, 37, sizeof(Annotation)},
  { 39, 46, sizeof(AnnotationGroup)},
  { 48, 60, sizeof(Datum)},
  { 67, 74, sizeof(HOGParameters)},
  { 76, 84, sizeof(DeviceOption)},
  { 87, 93, sizeof(Parameters)},
  { 94, 99, sizeof(ModelDef)},
  { 99, 104, sizeof(OperatorDef)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NormalizedBBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Annotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotationGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Datum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HOGParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Parameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperatorDef_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "kurff.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _TensorProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NormalizedBBox_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Annotation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AnnotationGroup_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Datum_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _HOGParameters_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DeviceOption_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Parameters_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ModelDef_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _OperatorDef_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TensorProto_default_instance_.DefaultConstruct();
  _NormalizedBBox_default_instance_.DefaultConstruct();
  _Annotation_default_instance_.DefaultConstruct();
  _AnnotationGroup_default_instance_.DefaultConstruct();
  _Datum_default_instance_.DefaultConstruct();
  _HOGParameters_default_instance_.DefaultConstruct();
  _DeviceOption_default_instance_.DefaultConstruct();
  _Parameters_default_instance_.DefaultConstruct();
  _ModelDef_default_instance_.DefaultConstruct();
  _OperatorDef_default_instance_.DefaultConstruct();
  _Annotation_default_instance_.get_mutable()->bbox_ = const_cast< ::kurff::NormalizedBBox*>(
      ::kurff::NormalizedBBox::internal_default_instance());
  _Parameters_default_instance_.get_mutable()->hog_parameters_ = const_cast< ::kurff::HOGParameters*>(
      ::kurff::HOGParameters::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013kurff.proto\022\005kurff\")\n\013TensorProto\022\014\n\004d"
      "ata\030\001 \003(\002\022\014\n\004dims\030\002 \003(\005\"\207\001\n\016NormalizedBB"
      "ox\022\014\n\004xmin\030\001 \001(\002\022\014\n\004ymin\030\002 \001(\002\022\014\n\004xmax\030\003"
      " \001(\002\022\014\n\004ymax\030\004 \001(\002\022\r\n\005label\030\005 \001(\005\022\021\n\tdif"
      "ficult\030\006 \001(\010\022\r\n\005score\030\007 \001(\002\022\014\n\004size\030\010 \001("
      "\002\"I\n\nAnnotation\022\026\n\013instance_id\030\001 \001(\005:\0010\022"
      "#\n\004bbox\030\002 \001(\0132\025.kurff.NormalizedBBox\"M\n\017"
      "AnnotationGroup\022\023\n\013group_label\030\001 \001(\005\022%\n\n"
      "annotation\030\002 \003(\0132\021.kurff.Annotation\"\201\001\n\005"
      "Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022"
      "\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 "
      "\001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007encoded\030\007 \001(\010"
      ":\005false\".\n\rHOGParameters\022\017\n\004sbin\030\001 \002(\005:\001"
      "4\022\014\n\004name\030\002 \001(\t\"P\n\014DeviceOption\022\026\n\013devic"
      "e_type\030\001 \001(\005:\0010\022\023\n\013cuda_gpu_id\030\002 \001(\005\022\023\n\013"
      "random_seed\030\003 \001(\r\":\n\nParameters\022,\n\016hog_p"
      "arameters\030\001 \001(\0132\024.kurff.HOGParameters\"\n\n"
      "\010ModelDef\"\r\n\013OperatorDef*A\n\nDeviceType\022\007"
      "\n\003CPU\020\000\022\010\n\004CUDA\020\001\022\n\n\006MKLDNN\020\002\022\024\n\rONLY_FO"
      "R_TEST\020\305\336\373\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kurff.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_kurff_2eproto

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_enum_descriptors[0];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 20901701:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorProto::kDataFieldNumber;
const int TensorProto::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorProto::TensorProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kurff.TensorProto)
}

void TensorProto::SharedCtor() {
  _cached_size_ = 0;
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:kurff.TensorProto)
  SharedDtor();
}

void TensorProto::SharedDtor() {
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorProto& TensorProto::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorProto* TensorProto::New(::google::protobuf::Arena* arena) const {
  TensorProto* n = new TensorProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.TensorProto)
  data_.Clear();
  dims_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.TensorProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dims = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_dims())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.TensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.TensorProto)
  return false;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }

  // repeated int32 dims = 2;
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dims(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.TensorProto)
}

::google::protobuf::uint8* TensorProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.TensorProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->data_, target);

  // repeated int32 dims = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->dims_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.TensorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float data = 1;
  {
    unsigned int count = this->data_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  // repeated int32 dims = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dims_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dims_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.TensorProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.TensorProto)
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  dims_.MergeFrom(from.dims_);
}

void TensorProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorProto::InternalSwap(TensorProto* other) {
  data_.InternalSwap(&other->data_);
  dims_.InternalSwap(&other->dims_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorProto

// repeated float data = 1;
int TensorProto::data_size() const {
  return data_.size();
}
void TensorProto::clear_data() {
  data_.Clear();
}
float TensorProto::data(int index) const {
  // @@protoc_insertion_point(field_get:kurff.TensorProto.data)
  return data_.Get(index);
}
void TensorProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:kurff.TensorProto.data)
}
void TensorProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:kurff.TensorProto.data)
}
const ::google::protobuf::RepeatedField< float >&
TensorProto::data() const {
  // @@protoc_insertion_point(field_list:kurff.TensorProto.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
TensorProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:kurff.TensorProto.data)
  return &data_;
}

// repeated int32 dims = 2;
int TensorProto::dims_size() const {
  return dims_.size();
}
void TensorProto::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int32 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:kurff.TensorProto.dims)
  return dims_.Get(index);
}
void TensorProto::set_dims(int index, ::google::protobuf::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:kurff.TensorProto.dims)
}
void TensorProto::add_dims(::google::protobuf::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:kurff.TensorProto.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:kurff.TensorProto.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:kurff.TensorProto.dims)
  return &dims_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizedBBox::kXminFieldNumber;
const int NormalizedBBox::kYminFieldNumber;
const int NormalizedBBox::kXmaxFieldNumber;
const int NormalizedBBox::kYmaxFieldNumber;
const int NormalizedBBox::kLabelFieldNumber;
const int NormalizedBBox::kDifficultFieldNumber;
const int NormalizedBBox::kScoreFieldNumber;
const int NormalizedBBox::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizedBBox::NormalizedBBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.NormalizedBBox)
}
NormalizedBBox::NormalizedBBox(const NormalizedBBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&xmin_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:kurff.NormalizedBBox)
}

void NormalizedBBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&xmin_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&xmin_) + sizeof(size_));
}

NormalizedBBox::~NormalizedBBox() {
  // @@protoc_insertion_point(destructor:kurff.NormalizedBBox)
  SharedDtor();
}

void NormalizedBBox::SharedDtor() {
}

void NormalizedBBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizedBBox::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizedBBox& NormalizedBBox::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

NormalizedBBox* NormalizedBBox::New(::google::protobuf::Arena* arena) const {
  NormalizedBBox* n = new NormalizedBBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizedBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.NormalizedBBox)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&xmin_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&xmin_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizedBBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.NormalizedBBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xmax = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_xmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_ymax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool difficult = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_difficult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &difficult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.NormalizedBBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.NormalizedBBox)
  return false;
#undef DO_
}

void NormalizedBBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.NormalizedBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xmin(), output);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ymin(), output);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xmax(), output);
  }

  // optional float ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ymax(), output);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // optional bool difficult = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->difficult(), output);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // optional float size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.NormalizedBBox)
}

::google::protobuf::uint8* NormalizedBBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.NormalizedBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ymin(), target);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xmax(), target);
  }

  // optional float ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ymax(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // optional bool difficult = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->difficult(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->score(), target);
  }

  // optional float size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.NormalizedBBox)
  return target;
}

size_t NormalizedBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.NormalizedBBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float xmin = 1;
    if (has_xmin()) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (has_ymin()) {
      total_size += 1 + 4;
    }

    // optional float xmax = 3;
    if (has_xmax()) {
      total_size += 1 + 4;
    }

    // optional float ymax = 4;
    if (has_ymax()) {
      total_size += 1 + 4;
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool difficult = 6;
    if (has_difficult()) {
      total_size += 1 + 1;
    }

    // optional float score = 7;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional float size = 8;
    if (has_size()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizedBBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedBBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizedBBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.NormalizedBBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.NormalizedBBox)
    MergeFrom(*source);
  }
}

void NormalizedBBox::MergeFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficult_ = from.difficult_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedBBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedBBox::CopyFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedBBox::IsInitialized() const {
  return true;
}

void NormalizedBBox::Swap(NormalizedBBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizedBBox::InternalSwap(NormalizedBBox* other) {
  std::swap(xmin_, other->xmin_);
  std::swap(ymin_, other->ymin_);
  std::swap(xmax_, other->xmax_);
  std::swap(ymax_, other->ymax_);
  std::swap(label_, other->label_);
  std::swap(difficult_, other->difficult_);
  std::swap(score_, other->score_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizedBBox::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizedBBox

// optional float xmin = 1;
bool NormalizedBBox::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizedBBox::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizedBBox::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.xmin)
  return xmin_;
}
void NormalizedBBox::set_xmin(float value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.xmin)
}

// optional float ymin = 2;
bool NormalizedBBox::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizedBBox::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizedBBox::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.ymin)
  return ymin_;
}
void NormalizedBBox::set_ymin(float value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.ymin)
}

// optional float xmax = 3;
bool NormalizedBBox::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NormalizedBBox::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
void NormalizedBBox::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.xmax)
  return xmax_;
}
void NormalizedBBox::set_xmax(float value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.xmax)
}

// optional float ymax = 4;
bool NormalizedBBox::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NormalizedBBox::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
void NormalizedBBox::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.ymax)
  return ymax_;
}
void NormalizedBBox::set_ymax(float value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.ymax)
}

// optional int32 label = 5;
bool NormalizedBBox::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NormalizedBBox::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void NormalizedBBox::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void NormalizedBBox::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.label)
  return label_;
}
void NormalizedBBox::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.label)
}

// optional bool difficult = 6;
bool NormalizedBBox::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NormalizedBBox::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
void NormalizedBBox::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  clear_has_difficult();
}
bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.difficult)
  return difficult_;
}
void NormalizedBBox::set_difficult(bool value) {
  set_has_difficult();
  difficult_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.difficult)
}

// optional float score = 7;
bool NormalizedBBox::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NormalizedBBox::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void NormalizedBBox::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void NormalizedBBox::clear_score() {
  score_ = 0;
  clear_has_score();
}
float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.score)
  return score_;
}
void NormalizedBBox::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.score)
}

// optional float size = 8;
bool NormalizedBBox::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NormalizedBBox::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
void NormalizedBBox::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void NormalizedBBox::clear_size() {
  size_ = 0;
  clear_has_size();
}
float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:kurff.NormalizedBBox.size)
  return size_;
}
void NormalizedBBox::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:kurff.NormalizedBBox.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotation::kInstanceIdFieldNumber;
const int Annotation::kBboxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotation::Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bbox()) {
    bbox_ = new ::kurff::NormalizedBBox(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:kurff.Annotation)
}

void Annotation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bbox_, 0, reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&bbox_) + sizeof(instance_id_));
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:kurff.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete bbox_;
  }
}

void Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotation::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Annotation& Annotation::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

Annotation* Annotation::New(::google::protobuf::Arena* arena) const {
  Annotation* n = new Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.Annotation)
  if (has_bbox()) {
    GOOGLE_DCHECK(bbox_ != NULL);
    bbox_->::kurff::NormalizedBBox::Clear();
  }
  instance_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instance_id = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .kurff.NormalizedBBox bbox = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.Annotation)
  return false;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 instance_id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // optional .kurff.NormalizedBBox bbox = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bbox_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.Annotation)
}

::google::protobuf::uint8* Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 instance_id = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // optional .kurff.NormalizedBBox bbox = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bbox_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.Annotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .kurff.NormalizedBBox bbox = 2;
    if (has_bbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bbox_);
    }

    // optional int32 instance_id = 1 [default = 0];
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Annotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bbox()->::kurff::NormalizedBBox::MergeFrom(from.bbox());
    }
    if (cached_has_bits & 0x00000002u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotation::InternalSwap(Annotation* other) {
  std::swap(bbox_, other->bbox_);
  std::swap(instance_id_, other->instance_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Annotation::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotation

// optional int32 instance_id = 1 [default = 0];
bool Annotation::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Annotation::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Annotation::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Annotation::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
::google::protobuf::int32 Annotation::instance_id() const {
  // @@protoc_insertion_point(field_get:kurff.Annotation.instance_id)
  return instance_id_;
}
void Annotation::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:kurff.Annotation.instance_id)
}

// optional .kurff.NormalizedBBox bbox = 2;
bool Annotation::has_bbox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Annotation::set_has_bbox() {
  _has_bits_[0] |= 0x00000001u;
}
void Annotation::clear_has_bbox() {
  _has_bits_[0] &= ~0x00000001u;
}
void Annotation::clear_bbox() {
  if (bbox_ != NULL) bbox_->::kurff::NormalizedBBox::Clear();
  clear_has_bbox();
}
const ::kurff::NormalizedBBox& Annotation::bbox() const {
  // @@protoc_insertion_point(field_get:kurff.Annotation.bbox)
  return bbox_ != NULL ? *bbox_
                         : *::kurff::NormalizedBBox::internal_default_instance();
}
::kurff::NormalizedBBox* Annotation::mutable_bbox() {
  set_has_bbox();
  if (bbox_ == NULL) {
    bbox_ = new ::kurff::NormalizedBBox;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Annotation.bbox)
  return bbox_;
}
::kurff::NormalizedBBox* Annotation::release_bbox() {
  // @@protoc_insertion_point(field_release:kurff.Annotation.bbox)
  clear_has_bbox();
  ::kurff::NormalizedBBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
void Annotation::set_allocated_bbox(::kurff::NormalizedBBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    set_has_bbox();
  } else {
    clear_has_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:kurff.Annotation.bbox)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotationGroup::kGroupLabelFieldNumber;
const int AnnotationGroup::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotationGroup::AnnotationGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.AnnotationGroup)
}
AnnotationGroup::AnnotationGroup(const AnnotationGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      annotation_(from.annotation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_label_ = from.group_label_;
  // @@protoc_insertion_point(copy_constructor:kurff.AnnotationGroup)
}

void AnnotationGroup::SharedCtor() {
  _cached_size_ = 0;
  group_label_ = 0;
}

AnnotationGroup::~AnnotationGroup() {
  // @@protoc_insertion_point(destructor:kurff.AnnotationGroup)
  SharedDtor();
}

void AnnotationGroup::SharedDtor() {
}

void AnnotationGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotationGroup::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotationGroup& AnnotationGroup::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotationGroup* AnnotationGroup::New(::google::protobuf::Arena* arena) const {
  AnnotationGroup* n = new AnnotationGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotationGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.AnnotationGroup)
  annotation_.Clear();
  group_label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AnnotationGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.AnnotationGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_group_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kurff.Annotation annotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.AnnotationGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.AnnotationGroup)
  return false;
#undef DO_
}

void AnnotationGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.AnnotationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_label(), output);
  }

  // repeated .kurff.Annotation annotation = 2;
  for (unsigned int i = 0, n = this->annotation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->annotation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.AnnotationGroup)
}

::google::protobuf::uint8* AnnotationGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.AnnotationGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_label(), target);
  }

  // repeated .kurff.Annotation annotation = 2;
  for (unsigned int i = 0, n = this->annotation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->annotation(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.AnnotationGroup)
  return target;
}

size_t AnnotationGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.AnnotationGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .kurff.Annotation annotation = 2;
  {
    unsigned int count = this->annotation_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation(i));
    }
  }

  // optional int32 group_label = 1;
  if (has_group_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_label());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotationGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.AnnotationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotationGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.AnnotationGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.AnnotationGroup)
    MergeFrom(*source);
  }
}

void AnnotationGroup::MergeFrom(const AnnotationGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.AnnotationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_.MergeFrom(from.annotation_);
  if (from.has_group_label()) {
    set_group_label(from.group_label());
  }
}

void AnnotationGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.AnnotationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationGroup::CopyFrom(const AnnotationGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.AnnotationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationGroup::IsInitialized() const {
  return true;
}

void AnnotationGroup::Swap(AnnotationGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotationGroup::InternalSwap(AnnotationGroup* other) {
  annotation_.InternalSwap(&other->annotation_);
  std::swap(group_label_, other->group_label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotationGroup::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotationGroup

// optional int32 group_label = 1;
bool AnnotationGroup::has_group_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AnnotationGroup::set_has_group_label() {
  _has_bits_[0] |= 0x00000001u;
}
void AnnotationGroup::clear_has_group_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void AnnotationGroup::clear_group_label() {
  group_label_ = 0;
  clear_has_group_label();
}
::google::protobuf::int32 AnnotationGroup::group_label() const {
  // @@protoc_insertion_point(field_get:kurff.AnnotationGroup.group_label)
  return group_label_;
}
void AnnotationGroup::set_group_label(::google::protobuf::int32 value) {
  set_has_group_label();
  group_label_ = value;
  // @@protoc_insertion_point(field_set:kurff.AnnotationGroup.group_label)
}

// repeated .kurff.Annotation annotation = 2;
int AnnotationGroup::annotation_size() const {
  return annotation_.size();
}
void AnnotationGroup::clear_annotation() {
  annotation_.Clear();
}
const ::kurff::Annotation& AnnotationGroup::annotation(int index) const {
  // @@protoc_insertion_point(field_get:kurff.AnnotationGroup.annotation)
  return annotation_.Get(index);
}
::kurff::Annotation* AnnotationGroup::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:kurff.AnnotationGroup.annotation)
  return annotation_.Mutable(index);
}
::kurff::Annotation* AnnotationGroup::add_annotation() {
  // @@protoc_insertion_point(field_add:kurff.AnnotationGroup.annotation)
  return annotation_.Add();
}
::google::protobuf::RepeatedPtrField< ::kurff::Annotation >*
AnnotationGroup::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:kurff.AnnotationGroup.annotation)
  return &annotation_;
}
const ::google::protobuf::RepeatedPtrField< ::kurff::Annotation >&
AnnotationGroup::annotation() const {
  // @@protoc_insertion_point(field_list:kurff.AnnotationGroup.annotation)
  return annotation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.Datum)
}
Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_data_(from.float_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&channels_, &from.channels_,
    reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
  // @@protoc_insertion_point(copy_constructor:kurff.Datum)
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:kurff.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Datum& Datum::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.Datum)
  float_data_.Clear();
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&channels_, 0, reinterpret_cast<char*>(&encoded_) -
      reinterpret_cast<char*>(&channels_) + sizeof(encoded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_float_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_encoded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0, n = this->float_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->float_data_, target);

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.Datum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float float_data = 6;
  {
    unsigned int count = this->float_data_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_data_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_data_.MergeFrom(from.float_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoded_ = from.encoded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  float_data_.InternalSwap(&other->float_data_);
  data_.Swap(&other->data_);
  std::swap(channels_, other->channels_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(label_, other->label_);
  std::swap(encoded_, other->encoded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional int32 channels = 1;
bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:kurff.Datum.channels)
  return channels_;
}
void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:kurff.Datum.channels)
}

// optional int32 height = 2;
bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:kurff.Datum.height)
  return height_;
}
void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:kurff.Datum.height)
}

// optional int32 width = 3;
bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:kurff.Datum.width)
  return width_;
}
void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:kurff.Datum.width)
}

// optional bytes data = 4;
bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:kurff.Datum.data)
  return data_.GetNoArena();
}
void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kurff.Datum.data)
}
#if LANG_CXX11
void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kurff.Datum.data)
}
#endif
void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kurff.Datum.data)
}
void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kurff.Datum.data)
}
::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:kurff.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:kurff.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:kurff.Datum.data)
}

// optional int32 label = 5;
bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:kurff.Datum.label)
  return label_;
}
void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:kurff.Datum.label)
}

// repeated float float_data = 6;
int Datum::float_data_size() const {
  return float_data_.size();
}
void Datum::clear_float_data() {
  float_data_.Clear();
}
float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:kurff.Datum.float_data)
  return float_data_.Get(index);
}
void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:kurff.Datum.float_data)
}
void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:kurff.Datum.float_data)
}
const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:kurff.Datum.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:kurff.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:kurff.Datum.encoded)
  return encoded_;
}
void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:kurff.Datum.encoded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HOGParameters::kSbinFieldNumber;
const int HOGParameters::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HOGParameters::HOGParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.HOGParameters)
}
HOGParameters::HOGParameters(const HOGParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sbin_ = from.sbin_;
  // @@protoc_insertion_point(copy_constructor:kurff.HOGParameters)
}

void HOGParameters::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbin_ = 4;
}

HOGParameters::~HOGParameters() {
  // @@protoc_insertion_point(destructor:kurff.HOGParameters)
  SharedDtor();
}

void HOGParameters::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HOGParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HOGParameters::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HOGParameters& HOGParameters::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

HOGParameters* HOGParameters::New(::google::protobuf::Arena* arena) const {
  HOGParameters* n = new HOGParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HOGParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.HOGParameters)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    sbin_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HOGParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.HOGParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sbin = 1 [default = 4];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sbin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kurff.HOGParameters.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.HOGParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.HOGParameters)
  return false;
#undef DO_
}

void HOGParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.HOGParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sbin = 1 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sbin(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kurff.HOGParameters.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.HOGParameters)
}

::google::protobuf::uint8* HOGParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.HOGParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sbin = 1 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sbin(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kurff.HOGParameters.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.HOGParameters)
  return target;
}

size_t HOGParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.HOGParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 sbin = 1 [default = 4];
  if (has_sbin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sbin());
  }
  // optional string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HOGParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.HOGParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const HOGParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HOGParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.HOGParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.HOGParameters)
    MergeFrom(*source);
  }
}

void HOGParameters::MergeFrom(const HOGParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.HOGParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      sbin_ = from.sbin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HOGParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.HOGParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HOGParameters::CopyFrom(const HOGParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.HOGParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HOGParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void HOGParameters::Swap(HOGParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HOGParameters::InternalSwap(HOGParameters* other) {
  name_.Swap(&other->name_);
  std::swap(sbin_, other->sbin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HOGParameters::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HOGParameters

// required int32 sbin = 1 [default = 4];
bool HOGParameters::has_sbin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HOGParameters::set_has_sbin() {
  _has_bits_[0] |= 0x00000002u;
}
void HOGParameters::clear_has_sbin() {
  _has_bits_[0] &= ~0x00000002u;
}
void HOGParameters::clear_sbin() {
  sbin_ = 4;
  clear_has_sbin();
}
::google::protobuf::int32 HOGParameters::sbin() const {
  // @@protoc_insertion_point(field_get:kurff.HOGParameters.sbin)
  return sbin_;
}
void HOGParameters::set_sbin(::google::protobuf::int32 value) {
  set_has_sbin();
  sbin_ = value;
  // @@protoc_insertion_point(field_set:kurff.HOGParameters.sbin)
}

// optional string name = 2;
bool HOGParameters::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HOGParameters::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HOGParameters::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HOGParameters::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& HOGParameters::name() const {
  // @@protoc_insertion_point(field_get:kurff.HOGParameters.name)
  return name_.GetNoArena();
}
void HOGParameters::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kurff.HOGParameters.name)
}
#if LANG_CXX11
void HOGParameters::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kurff.HOGParameters.name)
}
#endif
void HOGParameters::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kurff.HOGParameters.name)
}
void HOGParameters::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kurff.HOGParameters.name)
}
::std::string* HOGParameters::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:kurff.HOGParameters.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HOGParameters::release_name() {
  // @@protoc_insertion_point(field_release:kurff.HOGParameters.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HOGParameters::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:kurff.HOGParameters.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceOption::kDeviceTypeFieldNumber;
const int DeviceOption::kCudaGpuIdFieldNumber;
const int DeviceOption::kRandomSeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceOption::DeviceOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.DeviceOption)
}
DeviceOption::DeviceOption(const DeviceOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_type_, &from.device_type_,
    reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&device_type_) + sizeof(random_seed_));
  // @@protoc_insertion_point(copy_constructor:kurff.DeviceOption)
}

void DeviceOption::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&device_type_, 0, reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&device_type_) + sizeof(random_seed_));
}

DeviceOption::~DeviceOption() {
  // @@protoc_insertion_point(destructor:kurff.DeviceOption)
  SharedDtor();
}

void DeviceOption::SharedDtor() {
}

void DeviceOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceOption::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceOption& DeviceOption::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceOption* DeviceOption::New(::google::protobuf::Arena* arena) const {
  DeviceOption* n = new DeviceOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceOption::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.DeviceOption)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&device_type_, 0, reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&device_type_) + sizeof(random_seed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.DeviceOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device_type = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cuda_gpu_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cuda_gpu_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cuda_gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 random_seed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.DeviceOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.DeviceOption)
  return false;
#undef DO_
}

void DeviceOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.DeviceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 device_type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_type(), output);
  }

  // optional int32 cuda_gpu_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cuda_gpu_id(), output);
  }

  // optional uint32 random_seed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->random_seed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.DeviceOption)
}

::google::protobuf::uint8* DeviceOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.DeviceOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 device_type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_type(), target);
  }

  // optional int32 cuda_gpu_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cuda_gpu_id(), target);
  }

  // optional uint32 random_seed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->random_seed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.DeviceOption)
  return target;
}

size_t DeviceOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.DeviceOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 device_type = 1 [default = 0];
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional int32 cuda_gpu_id = 2;
    if (has_cuda_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cuda_gpu_id());
    }

    // optional uint32 random_seed = 3;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.DeviceOption)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.DeviceOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.DeviceOption)
    MergeFrom(*source);
  }
}

void DeviceOption::MergeFrom(const DeviceOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.DeviceOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      device_type_ = from.device_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      cuda_gpu_id_ = from.cuda_gpu_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      random_seed_ = from.random_seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.DeviceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceOption::CopyFrom(const DeviceOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.DeviceOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOption::IsInitialized() const {
  return true;
}

void DeviceOption::Swap(DeviceOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceOption::InternalSwap(DeviceOption* other) {
  std::swap(device_type_, other->device_type_);
  std::swap(cuda_gpu_id_, other->cuda_gpu_id_);
  std::swap(random_seed_, other->random_seed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceOption::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceOption

// optional int32 device_type = 1 [default = 0];
bool DeviceOption::has_device_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceOption::set_has_device_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceOption::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceOption::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
::google::protobuf::int32 DeviceOption::device_type() const {
  // @@protoc_insertion_point(field_get:kurff.DeviceOption.device_type)
  return device_type_;
}
void DeviceOption::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:kurff.DeviceOption.device_type)
}

// optional int32 cuda_gpu_id = 2;
bool DeviceOption::has_cuda_gpu_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceOption::set_has_cuda_gpu_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceOption::clear_has_cuda_gpu_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceOption::clear_cuda_gpu_id() {
  cuda_gpu_id_ = 0;
  clear_has_cuda_gpu_id();
}
::google::protobuf::int32 DeviceOption::cuda_gpu_id() const {
  // @@protoc_insertion_point(field_get:kurff.DeviceOption.cuda_gpu_id)
  return cuda_gpu_id_;
}
void DeviceOption::set_cuda_gpu_id(::google::protobuf::int32 value) {
  set_has_cuda_gpu_id();
  cuda_gpu_id_ = value;
  // @@protoc_insertion_point(field_set:kurff.DeviceOption.cuda_gpu_id)
}

// optional uint32 random_seed = 3;
bool DeviceOption::has_random_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceOption::set_has_random_seed() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceOption::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceOption::clear_random_seed() {
  random_seed_ = 0u;
  clear_has_random_seed();
}
::google::protobuf::uint32 DeviceOption::random_seed() const {
  // @@protoc_insertion_point(field_get:kurff.DeviceOption.random_seed)
  return random_seed_;
}
void DeviceOption::set_random_seed(::google::protobuf::uint32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:kurff.DeviceOption.random_seed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameters::kHogParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameters::Parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hog_parameters()) {
    hog_parameters_ = new ::kurff::HOGParameters(*from.hog_parameters_);
  } else {
    hog_parameters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kurff.Parameters)
}

void Parameters::SharedCtor() {
  _cached_size_ = 0;
  hog_parameters_ = NULL;
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:kurff.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
  if (this != internal_default_instance()) {
    delete hog_parameters_;
  }
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parameters& Parameters::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

Parameters* Parameters::New(::google::protobuf::Arena* arena) const {
  Parameters* n = new Parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.Parameters)
  if (has_hog_parameters()) {
    GOOGLE_DCHECK(hog_parameters_ != NULL);
    hog_parameters_->::kurff::HOGParameters::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.Parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kurff.HOGParameters hog_parameters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hog_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.Parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.Parameters)
  return false;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .kurff.HOGParameters hog_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hog_parameters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.Parameters)
}

::google::protobuf::uint8* Parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .kurff.HOGParameters hog_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hog_parameters_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.Parameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .kurff.HOGParameters hog_parameters = 1;
  if (has_hog_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hog_parameters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.Parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.Parameters)
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hog_parameters()) {
    mutable_hog_parameters()->::kurff::HOGParameters::MergeFrom(from.hog_parameters());
  }
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  if (has_hog_parameters()) {
    if (!this->hog_parameters_->IsInitialized()) return false;
  }
  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameters::InternalSwap(Parameters* other) {
  std::swap(hog_parameters_, other->hog_parameters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameters

// optional .kurff.HOGParameters hog_parameters = 1;
bool Parameters::has_hog_parameters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Parameters::set_has_hog_parameters() {
  _has_bits_[0] |= 0x00000001u;
}
void Parameters::clear_has_hog_parameters() {
  _has_bits_[0] &= ~0x00000001u;
}
void Parameters::clear_hog_parameters() {
  if (hog_parameters_ != NULL) hog_parameters_->::kurff::HOGParameters::Clear();
  clear_has_hog_parameters();
}
const ::kurff::HOGParameters& Parameters::hog_parameters() const {
  // @@protoc_insertion_point(field_get:kurff.Parameters.hog_parameters)
  return hog_parameters_ != NULL ? *hog_parameters_
                         : *::kurff::HOGParameters::internal_default_instance();
}
::kurff::HOGParameters* Parameters::mutable_hog_parameters() {
  set_has_hog_parameters();
  if (hog_parameters_ == NULL) {
    hog_parameters_ = new ::kurff::HOGParameters;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.hog_parameters)
  return hog_parameters_;
}
::kurff::HOGParameters* Parameters::release_hog_parameters() {
  // @@protoc_insertion_point(field_release:kurff.Parameters.hog_parameters)
  clear_has_hog_parameters();
  ::kurff::HOGParameters* temp = hog_parameters_;
  hog_parameters_ = NULL;
  return temp;
}
void Parameters::set_allocated_hog_parameters(::kurff::HOGParameters* hog_parameters) {
  delete hog_parameters_;
  hog_parameters_ = hog_parameters;
  if (hog_parameters) {
    set_has_hog_parameters();
  } else {
    clear_has_hog_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:kurff.Parameters.hog_parameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelDef::ModelDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.ModelDef)
}
ModelDef::ModelDef(const ModelDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kurff.ModelDef)
}

void ModelDef::SharedCtor() {
  _cached_size_ = 0;
}

ModelDef::~ModelDef() {
  // @@protoc_insertion_point(destructor:kurff.ModelDef)
  SharedDtor();
}

void ModelDef::SharedDtor() {
}

void ModelDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelDef::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelDef& ModelDef::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelDef* ModelDef::New(::google::protobuf::Arena* arena) const {
  ModelDef* n = new ModelDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.ModelDef)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.ModelDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.ModelDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.ModelDef)
  return false;
#undef DO_
}

void ModelDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.ModelDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.ModelDef)
}

::google::protobuf::uint8* ModelDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.ModelDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.ModelDef)
  return target;
}

size_t ModelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.ModelDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.ModelDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.ModelDef)
    MergeFrom(*source);
  }
}

void ModelDef::MergeFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ModelDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDef::CopyFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDef::IsInitialized() const {
  return true;
}

void ModelDef::Swap(ModelDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelDef::InternalSwap(ModelDef* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelDef::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelDef

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatorDef::OperatorDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kurff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.OperatorDef)
}
OperatorDef::OperatorDef(const OperatorDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kurff.OperatorDef)
}

void OperatorDef::SharedCtor() {
  _cached_size_ = 0;
}

OperatorDef::~OperatorDef() {
  // @@protoc_insertion_point(destructor:kurff.OperatorDef)
  SharedDtor();
}

void OperatorDef::SharedDtor() {
}

void OperatorDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatorDef::descriptor() {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperatorDef& OperatorDef::default_instance() {
  protobuf_kurff_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperatorDef* OperatorDef::New(::google::protobuf::Arena* arena) const {
  OperatorDef* n = new OperatorDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperatorDef::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.OperatorDef)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperatorDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.OperatorDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.OperatorDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.OperatorDef)
  return false;
#undef DO_
}

void OperatorDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.OperatorDef)
}

::google::protobuf::uint8* OperatorDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kurff.OperatorDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.OperatorDef)
  return target;
}

size_t OperatorDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.OperatorDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.OperatorDef)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatorDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatorDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.OperatorDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.OperatorDef)
    MergeFrom(*source);
  }
}

void OperatorDef::MergeFrom(const OperatorDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.OperatorDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OperatorDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.OperatorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorDef::CopyFrom(const OperatorDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.OperatorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorDef::IsInitialized() const {
  return true;
}

void OperatorDef::Swap(OperatorDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatorDef::InternalSwap(OperatorDef* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperatorDef::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperatorDef

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kurff

// @@protoc_insertion_point(global_scope)
